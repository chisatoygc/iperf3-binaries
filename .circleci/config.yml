version: 2.1

# setup: << pipeline.parameters.is-setup >>

orbs:
  continuation: circleci/continuation@0.1.2
  github-release: haskell-works/github-release@1.3.3

parameters:
  force-build:
    type: string
    default: ""

  # Parameters below are intended for internal use only
  is-setup:
    type: boolean
    default: true
  src-repo:
    type: string
    default: https://github.com/esnet/iperf.git
  src-releases-list-url:
    type: string
    default: https://github.com/esnet/iperf/releases
  target-rev:
    type: string
    default: ""
  common-build-params:
    type: string
    default: "--disable-shared --disable-static"
  xcode-version:
    type: string
    default: 12.4.0
  release-on:
    type: string
    default: master

library:
  setup-workflow: &setup-workflow
    jobs:
      - setup:
          context:
            - circleci

jobs:
  setup:
    executor: continuation/default
    parameters:
      continue-config:
        type: string
        default: .circleci/config.yml
      parameters-json:
        type: string
        default: .circleci/parameters.json
    steps:
      - checkout
      - run:
          name: Determine whether we should build the source
          command: |
            if [ "<< pipeline.parameters.force-build >>" != "" ]
            then
              TARGET_REV="<< pipeline.parameters.force-build >>"
              echo Forcibly building revision ${TARGET_REV}!
            else
              TARGET_REV=$(curl -sSJL << pipeline.parameters.src-releases-list-url >> | grep -o 'releases/tag/[^"]\{1,\}' | head -n 1 | awk -F/ '{ print $NF }')
              echo The latest release from the origin is revision ${TARGET_REV}.
            fi
            echo

            if [ "<< pipeline.parameters.force-build >>" != "" ] || ! (git tag | grep "^${TARGET_REV}-")
            then
              echo Calling CircleCI API to build revision ${TARGET_REV}...

              RELEASE_ON=$([ "${CIRCLE_BRANCH}" == "<< pipeline.parameters.release-on >>" ] && echo ${CIRCLE_SHA1} || echo "<< pipeline.parameters.release-on >>")
              echo '{"is-setup":false,"target-rev":"'"${TARGET_REV}"'","release-on":"'"${RELEASE_ON}"'"}' | tee -a << parameters.parameters-json >>
              # TODO: Rewrite with continuation API
              curl \
                --fail \
                -X POST \
                -H "Content-Type: application/json" \
                -H "Circle-Token: $CIRCLE_TOKEN" \
                --data-binary '{"branch":"'"${CIRCLE_SHA1}"'","parameters":'$(cat << parameters.parameters-json >>)'}' \
                https://circleci.com/api/v2/project/$(echo $CIRCLE_BUILD_URL | awk -F/ '{ print $4 "/" $5 "/" $6 }')/pipeline
            else
              echo 'We have already built this revision with the tag(s) above. Halting the pipeline.'
              circleci-agent step halt
            fi

  build-linux:
    docker:
      - image: debian:buster-slim
    parameters:
      label:
        type: string
        default: iperf3-linux
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y openssl git gcc make xz-utils
      - run:
          name: Clone iperf3
          command: git clone << pipeline.parameters.src-repo >> -b << pipeline.parameters.target-rev >>
      - run:
          name: Build iperf3
          working_directory: iperf
          command: |
            IPERF3_MAKE_PREFIX=$(eval echo $CIRCLE_WORKING_DIRECTORY)/<< parameters.label >>
            mkdir -p $IPERF3_MAKE_PREFIX

            ./configure --prefix=$IPERF3_MAKE_PREFIX << pipeline.parameters.common-build-params >>
            make
            make install

            mkdir -p $IPERF3_MAKE_PREFIX/share/doc/iperf3
            cp LICENSE $IPERF3_MAKE_PREFIX/share/doc/iperf3
      - run:
          name: Create a tarball
          command: tar -cJf << parameters.label >>.tar.xz << parameters.label >>
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.label >>.tar.xz
      - store_artifacts:
          path: << parameters.label >>.tar.xz

  build-windows:
    machine:
      image: windows-server-2019-vs2019:stable
    shell: powershell.exe
    resource_class: windows.medium
    parameters:
      label:
        type: string
        default: iperf3-cygwin64
    steps:
      - run:
          name: Download Cygwin installer
          shell: bash.exe -eo pipefail
          command: curl -JOL https://cygwin.com/setup-x86_64.exe
      - run:
          name: Install Cygwin and required packages
          command: .\setup-x86_64.exe -q -s https://mirrors.kernel.org/sourceware/cygwin/ -P libssl-devel,zlib,git,gcc-core,make
      - run:
          name: Clone iperf3 with Cygwin
          shell: C:\\cygwin64\\bin\\bash.exe --login -eo pipefail
          command: |
            eval mkdir -p $CIRCLE_WORKING_DIRECTORY
            eval cd $CIRCLE_WORKING_DIRECTORY

            git clone << pipeline.parameters.src-repo >> -b << pipeline.parameters.target-rev >>
      - run:
          name: Build iperf3 with Cygwin
          shell: C:\\cygwin64\\bin\\bash.exe --login -eo pipefail
          command: |
            NATIVE_WORK_DIR=$OLDPWD

            IPERF3_MAKE_PREFIX=$(eval echo $CIRCLE_WORKING_DIRECTORY)/<< parameters.label >>
            mkdir -p $IPERF3_MAKE_PREFIX

            eval cd $CIRCLE_WORKING_DIRECTORY/iperf
            ./configure --prefix=$IPERF3_MAKE_PREFIX << pipeline.parameters.common-build-params >>
            make
            make install

            # Bundle dependencies
            cp /usr/bin/cygwin1.dll /usr/bin/cygcrypto-1.1.dll /usr/bin/cygz.dll -t $IPERF3_MAKE_PREFIX/bin

            # Copy licence terms
            mkdir -p $IPERF3_MAKE_PREFIX/share/doc/iperf3 $IPERF3_MAKE_PREFIX/share/doc/Cygwin
            cp LICENSE -t $IPERF3_MAKE_PREFIX/share/doc/iperf3
            cp /usr/share/doc/Cygwin/CYGWIN_LICENSE /usr/share/doc/Cygwin/COPYING -t $IPERF3_MAKE_PREFIX/share/doc/Cygwin
            cp -r /usr/share/doc/openssl /usr/share/doc/zlib/ -t $IPERF3_MAKE_PREFIX/share/doc

            # Copy the deliverables to the working directory for non-Cygwin environment
            cp -r $(eval echo $CIRCLE_WORKING_DIRECTORY)/. $NATIVE_WORK_DIR
      - run:
          name: Create a Zip file
          command: |
            $ProgressPreference = "SilentlyContinue"
            Compress-Archive .\\<< parameters.label >> .\\<< parameters.label >>.zip
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.label >>.zip
      - store_artifacts:
          path: << parameters.label >>.zip

  build-macos:
    macos:
      xcode: << pipeline.parameters.xcode-version >>
    parameters:
      label:
        type: string
        default: iperf3-macos
    steps:
      - run:
          name: Clone iperf3
          command: git clone << pipeline.parameters.src-repo >> -b << pipeline.parameters.target-rev >>
      - run:
          name: Build iperf3
          working_directory: iperf
          command: |
            IPERF3_MAKE_PREFIX=$(eval echo $CIRCLE_WORKING_DIRECTORY)/<< parameters.label >>
            mkdir -p $IPERF3_MAKE_PREFIX

            ./configure --prefix=$IPERF3_MAKE_PREFIX --with-openssl=$(brew --prefix openssl) << pipeline.parameters.common-build-params >>
            make
            make install

            # Copy licence terms for iperf
            mkdir -p $IPERF3_MAKE_PREFIX/share/doc/iperf3
            cp LICENSE $IPERF3_MAKE_PREFIX/share/doc/iperf3

            # Postruns
            cd $IPERF3_MAKE_PREFIX/bin
            # Copy linked OpenSSL libraris to the current directory
            # and tell the linker to refer to them
            otool -L iperf3 | grep openssl | awk '{ print $1 }' | while read dylib
            do
              name=$(basename $dylib)
              cp $dylib ./
              chmod u+w $name
              install_name_tool -change $dylib @executable_path/$name iperf3
            done
            # Modify libssl as well
            otool -L libssl.1.1.dylib | grep openssl | awk '{ print $1 }' | while read dylib
            do
              install_name_tool -change $dylib @executable_path/$(basename $dylib) libssl.1.1.dylib
            done
            # Copy licence terms for OpenSSL
            mkdir -p $IPERF3_MAKE_PREFIX/share/doc/openssl
            cp $(brew --prefix openssl)/LICENSE $IPERF3_MAKE_PREFIX/share/doc/openssl
      - run:
          name: Create a Zip file
          command: zip -r << parameters.label >>.zip << parameters.label >>
      - persist_to_workspace:
          root: .
          paths:
            - << parameters.label >>.zip
      - store_artifacts:
          path: << parameters.label >>.zip

  test-linux:
    docker:
      - image: cimg/base:stable
    parameters:
      label:
        type: string
        default: iperf3-linux
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Extract << parameters.label >>.tar.xz
          command: tar -xf << parameters.label >>.tar.xz
      - run:
          name: Test executable
          command: << parameters.label >>/bin/iperf3 -v
      - run:
          name: Run as a server
          command: << parameters.label >>/bin/iperf3 -s
          background: true
      - run:
          name: Run as a client
          command: << parameters.label >>/bin/iperf3 -c localhost -R

  test-windows:
    machine:
      image: windows-server-2019-vs2019:stable
    shell: powershell.exe
    resource_class: windows.medium
    parameters:
      label:
        type: string
        default: iperf3-cygwin64
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Extract iperf3-cygwin64.zip
          command: |
            $ProgressPreference = "SilentlyContinue"
            Expand-Archive .\\<< parameters.label >>.zip .
      - run:
          name: Test executable
          command: .\\<< parameters.label >>\bin\iperf3.exe -v
      - run:
          name: Run as a server
          command: .\\<< parameters.label >>\bin\iperf3.exe -s
          background: true
      - run:
          name: Run as a client
          command: .\\<< parameters.label >>\bin\iperf3.exe -c localhost -R

  test-macos:
    macos:
      xcode: << pipeline.parameters.xcode-version >>
    parameters:
      label:
        type: string
        default: iperf3-macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Uninstall pre-installed OpenSSL
          command: brew uninstall --ignore-dependencies openssl
      - run:
          name: Extract << parameters.label >>
          command: unzip << parameters.label >>
      - run:
          name: Test executable
          command: << parameters.label >>/bin/iperf3 -v
      - run:
          name: Run as a server
          command: << parameters.label >>/bin/iperf3 -s
          background: true
      - run:
          name: Run as a client
          command: << parameters.label >>/bin/iperf3 -c localhost -R

  release:
    docker:
      - image: debian:buster-slim
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update 
            apt install -y curl git

            tmpPath=$(mktemp)
            curl -sSJL https://api.github.com/repos/cli/cli/releases/latest | grep -o 'https://github.com/cli/cli/releases/download/[^/]\{1,\}/gh_[^/]\{1,\}_linux_amd64.deb' | xargs curl -o $tmpPath -JL
            dpkg -i $tmpPath
      - attach_workspace:
          at: .
      - run:
          name: Create a release
          command: |
            IPERF3_BUILD_VERSION="<< pipeline.parameters.target-rev>>-${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}"
            gh release create -R ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} -t "${IPERF3_BUILD_VERSION}" -n "" "${IPERF3_BUILD_VERSION}" *

workflows:
  setup-on-demand:
    <<: *setup-workflow
    when: << pipeline.parameters.is-setup >>

  setup-scheduled:
    <<: *setup-workflow
    triggers:
      - schedule:
          cron: "30 0 * * *"
          filters:
            branches:
              only:
                - master

  build-test-release:
    when:
      not: << pipeline.parameters.is-setup >>
    jobs:
      - build-linux
      - build-windows
      - build-macos
      - test-linux:
          requires:
            - build-linux
      - test-windows:
          requires:
            - build-windows
      - test-macos:
          requires:
            - build-macos
      - release:
          requires:
            - test-linux
            - test-windows
            - test-macos
          context: github
          filters:
            branches:
              only: << pipeline.parameters.release-on >>
